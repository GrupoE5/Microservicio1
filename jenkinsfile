pipeline {
    agent any
    options {
        skipStagesAfterUnstable()
    }
    stage('checkout from github') {
            steps {
                git branch: 'Master',
		        credentialsId: 'git',
		        url: 'https://github.com/GrupoE5/Microservicio1.git'
            }
        }
        
        stage('Code Quality'){
            steps {
                script {
                    def scannerHome = tool 'sonarqube';  //global tool configuration http://172.17.0.1:8080/configureTools/
        			   withSonarQubeEnv("sonarqube-container") { //sonarqube server http://172.17.0.1:8080/configure
        			   sh "${tool("sonarqube")}/bin/sonar-scanner\
        							-Dsonar.projectKey=rest \
                                    -Dsonar.sources=src \
                                    -Dsonar.language=java \
                                    -Dsonar.sourceEncoding=UTF-8 \
                                    -Dsonar.host.url=http://localhost:9000/projects \
                                    -Dsonar.login=4c9aa12d5d3662872b446610c7891cc16f682a48"
        				   }
                }
            }
        }
    stages {
         stage('Build') {
          when {
                branch '*'
            }
            steps {
                sh 'java -version'
                sh 'npm run build:dev'
            }
        }
        stage('Test-sonar'){
        when {
                branch 'master'
                branch 'Develop'
                branch 'Release'
            }
            steps {
                sh 'make check'
                junit 'reports/**/*.xml'
            }
    }
         stage('Test-veracode'){
        when {
                branch 'Master'
                branch 'Develop'
                branch 'Release'
            }
            steps {
¿               sh 'make check'
                junit 'reports/**/*.xml'
            }
     }
         stage('Test-publicar'){
         steps {
             sh 'make check'
             junit 'reports/**/*.xml'
             }
         }
         stage('public-toDockerhub') {
         when {
             branch 'Develop'
             }
             steps {
         withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: jenkins_registry_cred_id, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
             sh "docker login -e ${docker_email} -u ${env.USERNAME} -p ${env.PASSWORD} ${docker_registry_url}"
             }
             }
         }
     stage('Deploy-qa') {
         when {
             branch 'Release' 
             }
             steps {
             sh 'echo publish'
             
         }
     }
     }
}
